@model quyettien.Models.InstallmentBill

@{
    ViewBag.Title = "Cập nhật thông tin hóa đơn của " + Model.Customer.CustomerName;
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="page-title-box">
            <h4 class="page-title float-left">Cập nhật thông tin hóa đơn</h4>
            <div class="clearfix"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card-box">
            <h4 class="m-t-0 header-title">Thông tin đơn hàng</h4>
            <div class="row">
                <div class="col-12">
                    <div class="p-20">

                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ID)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.BillCode, "Mã hóa đơn", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.BillCode, new { htmlAttributes = new { @Readonly = "readonly", @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.BillCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerID, "Khách hàng", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("CustomerID", null, htmlAttributes: new { @disabled = "disabled", @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Date, "Ngày mua", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @*@Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })*@
                                        <input type="text" class="form-control" name="Date" value="@Model.Date.ToShortDateString()" readonly />
                                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Method, "Phương thức", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @*@Html.EditorFor(model => model.Method, new { htmlAttributes = new { @class = "form-control" } })*@
                                        <select class="form-control" id="Method" name="Method">
                                            @{
                                                string[] method = { "Ngày", "Tuần", "Tháng" };
                                                for (int i = 0; i < method.Length; i++)
                                                {
                                                    if (method[i] == Model.Method)
                                                    {
                                                        <option value="@Model.Method" selected>@Model.Method</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@Model.Method">@Model.Method</option>
                                                    }
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => model.Method, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Period, "Thời hạn", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Period, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Period, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Shipper, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Shipper, "Nhân viên giao hàng", new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Shipper, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Note, "Ghi chú", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="col-md-5">Danh sách sản phẩm</label>
                                    <div class="col-md-10">
                                        <table class="table table-bordered">
                                            <thead>
                                                <tr>
                                                    <th>Sản phẩm</th>
                                                    <th>Đơn giá</th>
                                                    <th>Số lượng</th>
                                                    <th>Thành tiền</th>
                                                    <th>Tùy chọn</th>
                                                </tr>
                                            </thead>
                                            <tbody id="product-list"></tbody>
                                            <tfoot>
                                                <tr>
                                                    <td colspan="3"></td>
                                                    <td colspan="2">
                                                        <h5 class="text-danger">Tổng: <span id="total"></span></h5>
                                                        <input type="hidden" id="GrandTotal" name="GrandTotal" />
                                                    </td>

                                                </tr>
                                            </tfoot>
                                        </table>
                                        <button type="button" class="btn btn-outline-info waves-effect" id="add-product">Thêm sản phẩm</button>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Taken, "Số tiền đưa trước", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Taken, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Taken, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remain, "Số tiền còn lại", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Remain, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.Remain, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <hr />

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <a href="@Url.Action("Index")" class="btn btn-danger waves-light waves-effect btn-rounded"><i class="mdi mdi-close-circle-outline"></i> Hủy</a>
                                        <button type="submit" class="btn btn-success waves-light waves-effect btn-rounded" id="save-bill"><i class="mdi mdi-check-circle-outline"></i>Lưu</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section script {
    @Scripts.Render("~/bundles/jqueryval")

    @*----------------------------------------*@
    <script>
        // đọc danh sách sản phẩm trong hóa đơn
        var billID = $("#ID").val();
        var row = '';
        $.ajax({
            method: "POST",
            dataType: 'json',
            url: '@Url.Action("ChiTietHoaDon", "TraGop")',
            data: { id: billID},
        }).done(function (data) {
            $.each(data, function (i, product) {
                row += '<tr id = ' + i + '>';
                row += '<td>' + dropDownSanPham(product.ProductID) + '</td>';
                row += '<td><span class="price">' + addDot(product.InstallmentPrice) + '</span><input type="hidden" name="SalePrice" class="price-input" value="' + product.InstallmentPrice + '"></td>';
                row += '<td>' + dropDownSoLuong(product.Quantity) + '</td>';
                row += '<td class="money">' + addDot((product.Quantity * product.InstallmentPrice)) + '</td>';
                row += '<td><button type="button" class="btn btn-outline-danger btn-rounded btn-sm waves-effect delete-product"><i class="mdi mdi-close-circle-outline"></i></button></td>';
                row += '</tr>';
            })

            $("#product-list").html(row);
            TongTien();
        })

        // Tạo dropdown sản phẩm
        function dropDownSanPham(id) {
            var select = '<select class="form-control dropdown-product" id="ProductID">';
            $.ajax({
                method: "POST",
                dataType: 'json',
                url: '@Url.Action("DanhSachSanPham", "TraGop")',
                async: false,
            }).done(function (data) {
                $.each(data.productList, function (i, product) {
                    if (id == product.Value) {
                        select += '<option value="' + product.Value + '" selected>' + product.Text + '</option>';
                    } else {
                        select += '<option value="' + product.Value + '">' + product.Text + '</option>';
                    }
                })
                select+= '</select>'
            })
            return select;
        }

        // Tạo dropdown số lượng
        function dropDownSoLuong(quantity) {
            var select = '<select class="form-control quantity" name="Quantity">'
            for (i = 1; i <= 20; i++) {
                if (i == quantity) {
                    select += '<option value="' + i + '" selected>' + i + '</option>';
                } else {
                    select += '<option value="' + i + '">' + i + '</option>';
                }
            }
            select += '</select>';
            return select;
        }
    </script>

    @*----------------------------------------*@


    <!-- Select2 -->
    <script src="~/Areas/admin/assets/plugins/select2/js/select2.min.js"></script>

    <script>
        $(document).ready(function () {
            // tìm kiếm tên khách hàng
            $("#CustomerID").select2({
                "language": {
                    "noResults": function () {
                        return "Không có kết quả phù hợp. Vui lòng vào quản lý khách hàng để thêm"
                    }
                },
            });

            // tìm kiếm sản phẩm
            $(".dropdown-product").select2({
                "language": {
                    "noResults": function () {
                        return "Không có kết quả phù hợp. Vui lòng vào quản lý sản phẩm để thêm"
                    }
                },
            });
        });

        // Xử lý khi nhập tiền đưa trước
        //tienConLai();
        $("#Taken").keyup(function () {
            tienConLai();
        })


        function tienConLai() {
            var total = $("#GrandTotal").val();
            var taken = $("#Taken").val();
            $("#Remain").val(total - taken);
        }


        var row_id = 31;
        // Thêm sản phẩm
        $("#add-product").click(function () {
            var count = $("#product-list tr").length;
            if (count < 30) {
                var row = '';
                row += '<tr>';
                row += '<td>' + dropDownProductList() + '</td>';
                row += '<td><span class="price"></span><input type="hidden" name="InstallmentPrice" class="price-input"></td>';
                row += '<td>' + selectQuantity() + '</td>';
                row += '<td class="money"></td>';
                row += '<td><button type="button" class="btn btn-outline-danger btn-rounded btn-sm waves-effect delete-product"><i class="mdi mdi-close-circle-outline"></i></button></td>';
                row += '</tr>';

                addElement("product-list", "tr", row_id, row)

                ghiDonGia(row_id);
                row_id++;

                // Select2
                $(".dropdown-product").select2({
                    "language": {
                        "noResults": function () {
                            return "Không có kết quả phù hợp. Vui lòng vào quản lý sản phẩm để thêm"
                        }
                    },
                });
            } else {
                alert("1 hóa đơn không thể có hơn 30 sản phẩm");
            }
        })

        function selectQuantity() {
            var select = '<select class="form-control quantity" name="Quantity">'
            for (i = 1; i <= 20; i++) {
                select += '<option value="' + i + '">' + i + '</option>';
            }
            select += '</select>';
            return select;
        }

        function dropDownProductList() {
            var select = '<select class="form-control dropdown-product" id="ProductID">';

            $.ajax({
                method: "POST",
                dataType: 'json',
                url: '@Url.Action("DanhSachSanPham", "TraGop")',
                async: false,
            }).done(function (data) {
                $.each(data.productList, function (i,product) {
                    select += '<option value="' + product.Value + '">' + product.Text + '</option>';
                })

                select+= '</select>'

            })
            return select

        }


        // Xử lý xóa sản phẩm
        $("#product-list").on("click", ".delete-product",function () {
            var id = $(this).parents("tr").attr("id");
            var count = $("#product-list tr").length;
            if (count == 1) {
                alert("Hóa đơn phải có ít nhất 1 sản phẩm")
            } else {
                removeElement(id);
                TongTien();
                tienConLai();
            }
        })

        function addElement(parentId, elementTag, elementId, html) {
            // Thêm dòng
            var p = document.getElementById(parentId);
            var newElement = document.createElement(elementTag);
            newElement.setAttribute('id', elementId);
            newElement.innerHTML = html;
            p.appendChild(newElement);

        }
        function removeElement(elementId) {
            // Xóa dòng
            var element = document.getElementById(elementId);
            element.parentNode.removeChild(element);
        }



        //Ghi giá cho sản phẩm
        //ghiDonGia(1);
        function ghiDonGia(id) {
            var row = $("tr[id^='"+id+"']")
            var product_id = row.find("#ProductID").val()
            var url = '@Url.Action("InstallmentPrice", "TraGop")';
            url = url + '/' + product_id;
            $.get(url, function (data) {
                row.find(".price").html(addDot(data));
                row.find(".money").html(addDot(data));
                row.find(".price-input").val(data);

                // tính tổng tiền
                TongTien();
                tienConLai();
            });
        }


        // Xử lý khi thay đổi sản phẩm
        $(document).on("change", ".dropdown-product", function () {

            // Tìm hàng được thay đổi
            var price = $(this).parents("tr").find(".price");
            var price_input = $(this).parents("tr").find(".price-input");
            var money = $(this).parents("tr").find(".money");
            var quantity = $(this).parents("tr").find(".quantity").val();

            var product_id = $(this).val();

            // thay đổi giá
            $.ajax({
                method: "POST",
                dataType: 'json',
                url: "@Url.Action("InstallmentPrice", "TraGop")",
                data: { "id": product_id },
            }).done(function (data) {

                // hiển thị đơn giá mới
                price.html(addDot(data))

                // đơn giá ẩn để lưu
                price_input.val(data);

                // tính thành tiền vs đơn giá mới
                money.html(addDot(data * quantity))

                // tính tổng tiền
                TongTien();
                tienConLai();

            }).fail(function (jqXHR, statusText, errorThrown) {
                console.log("Fail:" + jqXHR.responseText);
                console.log(errorThrown);
            })

        });

        // Tính thành tiền khi đổi số lượng
        $(document).on("change", ".quantity", function () {
            var quantity = $(this).val();
            var money = $(this).parents("tr").find(".money");
            var price = $(this).parents("tr").find(".price").text();
            price = convertInt(price);
            var m = addDot(price * quantity);
            money.html(m);

            // tính tổng tiền
            TongTien();
            tienConLai();
        })

        // Hàm chuyển STRING thành INT
        function convertInt(s) {
            return parseInt(s.replace(/[^0-9]+/g, ''));
        }

        // Hàm thêm . vào giá
        function addDot(s) {
            return new Intl.NumberFormat().format(s)
        }


        function TongTien() {
            var total = 0;
            // Tính tổng tiền của hóa đơn
            $("#product-list tr").each(function () {
                var money = $(this).find(".money").text();

                money = convertInt(money);
                total += money;

                // lưu tổng tiền vào input
                $("#GrandTotal").val(total);
                // Hiển thị tổng tiền
                $("#total").html(addDot(total) + " VND")
            })
        }


        // xử lý khi nhấn nút lập hóa đơn
        $("#save-bill").on("click", function (e) {

            e.preventDefault();
            // Lấy thông tin hóa đơn
            var installmentBill = {};
            installmentBill.CustomerID = $("#CustomerID").val();
            installmentBill.Date = $("#Date").val();
            installmentBill.Method = $("#Method").val();
            installmentBill.Period = $("#Period").val();
            installmentBill.Shipper = $("#Shipper").val();
            installmentBill.Note = $("#Note").val();
            installmentBill.GrandTotal = $("#GrandTotal").val();
            installmentBill.Taken = $("#Taken").val();
            installmentBill.Remain = $("#Remain").val();

            $.ajax({
                method: "POST",
                dataType: "json",
                url: "@Url.Action("Sua", "TraGop")",
                data: JSON.stringify(installmentBill),
                contentType: "application/json; charset=utf-8",
            }).done(function (data) {
                if (data.modelState) {
                    $.each(data.modelState, function (id, message) {
                        // hiển thị validation
                        setError(id, message)
                    })
                } else {
                    //alert(data.billID)
                    // Thực hiện thêm chi tiết hóa đơn
                    themChiTiet(data.billID);

                    // Về danh sách hóa đơn
                    window.location = "@Url.Action("Index", "TraGop")"
                }
            }).fail(function (jqXHR, statusText, errorThrown) {
                console.log("Fail:" + jqXHR.responseText);
                console.log(errorThrown);
            })


            function themChiTiet(id) {
                var installmentBillDetails = new Array();
                $("#product-list tr").each(function () {
                    var row = $(this);
                    var ibd = {};
                    ibd.BillID = id;
                    ibd.ProductID = row.find(".dropdown-product").val();
                    ibd.Quantity = row.find(".quantity").val();
                    ibd.InstallmentPrice = row.find(".price-input").val();
                    installmentBillDetails.push(ibd);
                });

                //console.log(installmentBillDetails);

                $.ajax({
                    method: "POST",
                    dataType: 'json',
                    url: "@Url.Action("ThemChiTiet", "TraGop")",
                    data: JSON.stringify(installmentBillDetails),
                    contentType: "application/json; charset=utf-8",
                }).done(function (data) {
                    //alert("Hóa đơn được thêm thành công");

                }).fail(function (jqXHR, statusText, errorThrown) {
                    //console.log("Fail:" + jqXHR.responseText);
                    //console.log(errorThrown);
                })
            }

            // hàm hiển thị validation
            function setError(id, message) {
                var span = $("span[data-valmsg-for=\"" + id + "\"]");
                if (span && span.length > 0) {
                    $(span).html(message);
                    if (message && message != "") {
                        $(span).removeClass("field-validation-valid");
                        $(span).addClass("field-validation-no-valid");
                    } else {
                        $(span).removeClass("field-validation-no-valid");
                        $(span).addClass("field-validation-valid");
                    }
                }
            }
        });
    </script>
}
